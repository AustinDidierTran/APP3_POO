#include "liste.h"

void Node::operator=(Node* n)
{
    value = n->value;
    next = n->next;
    previous = n->previous;

}
Liste::Liste(){
	size = 0;
    back = NULL;
    head = NULL;
}
void Liste::add(PlatChoisi* t){

   Node* n;
   n->value = t;

	cout << t->get_code();
	if(!size){
		head = n;
		back = n;
	}
	else{
		head->previous = n;
		n->next = head;
		head = n;
	}
	size++;
    
    //	sortByCode();
}
void Liste::addAt(PlatChoisi* t, int indice){
    
    Node* n;
    n->value = t;
    
    if(indice == 0)
        add(t);
    else if(indice == size)
        back = n;
    else if(indice > size)
    {
        cout << "Indice trop élevé\n";
    }
    else
    {
        n->previous = get(indice-1);
        n->next = get(indice);
        get(indice)->previous = n;
        get(indice-1)->next = n;
    }
    
}
int Liste::findCode(int n){
    for(int i=0; i<size; i++)
        if(getAt(i)->get_code() == n)
            return i;
    
    return -1;
}
Node* Liste::get(int n){
	
	Node* currentNode = head;

	for(int i=0; i<n; i++){
		currentNode = currentNode->next;
	}

	return currentNode;
}
int Liste::getAtCode(int n)
{
    for(int i=0; i<size; i++)
    {
        if(get(i)->value->get_code() == n)
            return i;
    }
    
    cout << "Code non trouvable";
    return -1;
}
void Liste::sortByCode(){
    
    for(int i=0; i<size-1; i++)
        for(int j=0; j<size; j++)
            if(get(i)->value->get_code() > get(j)->value->get_code())
                swap(get(i), get(j));
}
PlatChoisi* Liste::getAt(int n){
	Node* currentNode = get(n);
	return currentNode->value;
}
void Liste::deleteAt(int n){

	if(n >= size)
	{
		cout << "Element non existant" << endl;
	}
	else if(size == 0){

	}
	else if(size == 1){
		delete get(n);
		head = NULL;
		back = NULL;
		size--;
	}
	else {
		get(n-1)->next = get(n+1);
		get(n+1)->previous = get(n-1);
		delete get(n);
		size--;
	}

}
void Liste::deleteAll(){
	while(size != 0){
		deleteAt(0);
	}
}
int Liste::getSize(){
    return size;
}
void Liste::swap(Node* n1, Node* n2){
    
    Node* temp;
    
    temp = n1;
    n1 = n2;
    n2 = temp;
    
}
void Liste::afficherTout(){
	for(int i=0; i<size; i++)
	   get(i)->value->afficher();
}

